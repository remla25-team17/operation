# # -*- mode: ruby -*-
# # vi: set ft=ruby :

# num_of_workers = 2

# SERVICES = {
#   "ctrl" => {
#     ip: "192.168.56.100",
#   }
# }

# (1..num_of_workers).each do |i|
#   SERVICES["node-#{i}"] = {
#     ip: "192.168.56.#{100 + i}"
#   }
# end



# # All Vagrant configuration is done below. The "2" in Vagrant.configure
# # configures the configuration version (we support older styles for
# # backwards compatibility). Please don't change it unless you know what
# # you're doing.
# Vagrant.configure("2") do |config|
#   # The most common configuration options are documented and commented below.
#   # For a complete reference, please see the online documentation at
#   # https://docs.vagrantup.com.

#   # Every Vagrant development environment requires a box. You can search for
#   # boxes at https://vagrantcloud.com/search.
#   config.vm.box = "bento/ubuntu-24.04"



#   # Controller
#   config.vm.define "ctrl" do |ctrl|
#     ctrl.vm.hostname = "ctrl"
#     ctrl.vm.network "private_network", ip: SERVICES["ctrl"][:ip]
#   end

#   # Workers
#   for i in 1..num_of_workers
#     config.vm.define "node-#{i}" do |node|
#       node.vm.hostname = "node-#{i}"
#       node.vm.network "private_network", ip: SERVICES["node-#{i}"][:ip]
#     end
#   end

#   # Provisioning: Add SSH public key
#   config.vm.provision "shell", inline: <<-SHELL
#     mkdir -p ~/.ssh
#     echo "#{File.read(File.expand_path("~/.ssh/id_rsa.pub")).strip}" >> ~/.ssh/authorized_keys
#     chown -R vagrant:vagrant ~/.ssh
#     chmod 600 ~/.ssh/authorized_keys
#     chmod 700 ~/.ssh
#   SHELL

#   # Disable automatic box update checking. If you disable this, thenw
#   # boxes will only be checked for updates when the user runs
#   # `vagrant box outdated`. This is not recommended.
#   # config.vm.box_check_update = false

#   # Create a forwarded port mapping which allows access to a specific port
#   # within the machine from a port on the host machine. In the example below,
#   # accessing "localhost:8080" will access port 80 on the guest machine.
#   # NOTE: This will enable public access to the opened port
#   # config.vm.network "forwarded_port", guest: 80, host: 8080

#   # Create a forwarded port mapping which allows access to a specific port
#   # within the machine from a port on the host machine and only allow access
#   # via 127.0.0.1 to disable public access
#   #config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

#   # Create a private network, which allows host-only access to the machine
#   # using a specific IP.
#   # config.vm.network "private_network", ip: "192.168.33.10"

#   # Create a public network, which generally matched to bridged network.
#   # Bridged networks make the machine appear as another physical device on
#   # your network.
#   # config.vm.network "public_network"

#   # Share an additional folder to the guest VM. The first argument is
#   # the path on the host to the actual folder. The second argument is
#   # the path on the guest to mount the folder. And the optional third
#   # argument is a set of non-required options.
#   # config.vm.synced_folder "../data", "/vagrant_data"

#   # Disable the default share of the current code directory. Doing this
#   # provides improved isolation between the vagrant box and your host
#   # by making sure your Vagrantfile isn't accessible to the vagrant box.
#   # If you use this you may want to enable additional shared subfolders as
#   # shown above.
#   # config.vm.synced_folder ".", "/vagrant", disabled: true

#   # Provider-specific configuration so you can fine-tune various
#   # backing providers for Vagrant. These expose provider-specific options.
#   # Example for VirtualBox:
#   #
#   # config.vm.provider "virtualbox" do |vb|
#   #   # Display the VirtualBox GUI when booting the machine
#   #   vb.gui = true
#   #
#   #   # Customize the amount of memory on the VM:
#   #   vb.memory = "1024"
#   # end
#   #
#   # View the documentation for the provider you are using for more
#   # information on available options.

#   # Enable provisioning with a shell script. Additional provisioners such as
#   # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
#   # documentation for more information about their specific syntax and use.
#   # config.vm.provision "shell", inline: <<-SHELL
#   #   apt-get update
#   #   apt-get install -y apache2
#   # SHELL
# end


Vagrant.configure("2") do |config|
  # Define your base box
  config.vm.box = "bento/ubuntu-24.04"

  config.ssh.insert_key = false



  

  # # Disable automatic key insertion to use your own key
  # config.ssh.insert_key = false

  # # Read your public SSH key
  # ssh_pub_key = File.read(File.expand_path("~/.ssh/id_rsa.pub")).strip

  # Define your machines
  config.vm.define "ctrl" do |ctrl|
    ctrl.vm.hostname = "ctrl"
    ctrl.vm.network "private_network", ip: "192.168.56.100"

    public_key = File.read(File.expand_path("~/vagrant_ssh/vagrant_id_rsa.pub")).strip
    ctrl.vm.provision "shell", privileged: false, inline: <<-SHELL
      mkdir -p /home/vagrant/.ssh
      echo "#{public_key}" >> /home/vagrant/.ssh/authorized_keys
      chmod 700 /home/vagrant/.ssh
      chmod 600 /home/vagrant/.ssh/authorized_keys
      chown -R vagrant:vagrant /home/vagrant/.ssh
    SHELL
    #provisioning ansible
    ctrl.vm.provision "ansible" do |ansible|
      ansible.playbook = "ctrl.yml"
      #ansible.inventory_path = "inventory.cfg"
      ansible.extra_vars = {
        ansible_ssh_private_key_file: "~/vagrant_ssh/vagrant_id_rsa"
      }
    end

    # ctrl.vm.provision "shell", inline: <<-SHELL
    #   mkdir -p /home/vagrant/.ssh
    #   echo "#{ssh_pub_key}" >> /home/vagrant/.ssh/authorized_keys
    #   chown -R vagrant:vagrant /home/vagrant/.ssh
    #   chmod 700 /home/vagrant/.ssh
    #   chmod 600 /home/vagrant/.ssh/authorized_keys
    # SHEL
  end

  # # Define worker nodes
  # (1..2).each do |i|
  #   config.vm.define "node-#{i}" do |node|
  #     node.vm.hostname = "node-#{i}"
  #     node.vm.network "private_network", ip: "192.168.56.#{100 + i}"
  #     # node.vm.provision "ansible" do |ansible|
  #     #   ansible.playbook = "node.yml" 
  #     # end
  #     # node.vm.provision "shell", inline: <<-SHELL
  #     #   mkdir -p /home/vagrant/.ssh
  #     #   echo "#{ssh_pub_key}" >> /home/vagrant/.ssh/authorized_keys
  #     #   chown -R vagrant:vagrant /home/vagrant/.ssh
  #     #   chmod 700 /home/vagrant/.ssh
  #     #   chmod 600 /home/vagrant/.ssh/authorized_keys
  #     # SHELL
  #   end
  # end
end
